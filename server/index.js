const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const PDFDocument = require('pdfkit');
const { initializeDatabase, testConnection } = require('./config/database');
const MenuItem = require('./models/menuItem');
const Invoice = require('./models/invoice');
const TaxSettings = require('./models/taxSettings');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Generate PDF invoice
const generatePDF = (invoice) => {
  return new Promise((resolve) => {
    const doc = new PDFDocument({ margin: 50 });
    const chunks = [];

    doc.on('data', chunk => chunks.push(chunk));
    doc.on('end', () => {
      const result = Buffer.concat(chunks);
      resolve(result.toString('base64'));
    });

    // Header
    doc.fontSize(24).font('Helvetica-Bold').text('PALM CAFE', { align: 'center' });
    doc.moveDown(0.5);
    doc.fontSize(14).font('Helvetica').text('INVOICE', { align: 'center' });
    doc.moveDown();

    // Invoice details
    doc.fontSize(12).font('Helvetica-Bold').text(`Invoice #: ${invoice.invoice_number}`);
    doc.fontSize(10).font('Helvetica').text(`Date: ${new Date(invoice.date).toLocaleDateString()}`);
    doc.fontSize(10).font('Helvetica').text(`Time: ${new Date(invoice.date).toLocaleTimeString()}`);
    doc.moveDown();

    // Customer info
    doc.fontSize(12).font('Helvetica-Bold').text('Customer Information:');
    doc.fontSize(10).font('Helvetica').text(`Name: ${invoice.customer_name}`);
    if (invoice.customer_phone) {
      doc.fontSize(10).font('Helvetica').text(`Phone: ${invoice.customer_phone}`);
    }
    doc.moveDown();

    // Items table
    doc.fontSize(12).font('Helvetica-Bold').text('Items:');
    doc.moveDown(0.5);

    // Table header
    const tableTop = doc.y;
    doc.fontSize(10).font('Helvetica-Bold');
    doc.text('Item', 50, tableTop);
    doc.text('Qty', 250, tableTop);
    doc.text('Price', 300, tableTop);
    doc.text('Total', 380, tableTop);

    // Table content
    let yPosition = tableTop + 20;
    doc.fontSize(10).font('Helvetica');
    
    invoice.items.forEach((item, index) => {
      if (yPosition > 700) {
        doc.addPage();
        yPosition = 50;
      }
      
      doc.text(item.item_name, 50, yPosition);
      doc.text(item.quantity.toString(), 250, yPosition);
      doc.text(`$${parseFloat(item.price).toFixed(2)}`, 300, yPosition);
      doc.text(`$${parseFloat(item.total).toFixed(2)}`, 380, yPosition);
      yPosition += 20;
    });

    // Totals section
    doc.moveDown();
    const totalsY = doc.y;
    
    doc.fontSize(10).font('Helvetica');
    doc.text('Subtotal:', 300, totalsY);
    doc.text(`$${parseFloat(invoice.subtotal).toFixed(2)}`, 380, totalsY);
    
    if (parseFloat(invoice.tax_amount) > 0) {
      doc.text('Tax:', 300, totalsY + 20);
      doc.text(`$${parseFloat(invoice.tax_amount).toFixed(2)}`, 380, totalsY + 20);
    }
    
    if (parseFloat(invoice.tip_amount) > 0) {
      doc.text('Tip:', 300, totalsY + 40);
      doc.text(`$${parseFloat(invoice.tip_amount).toFixed(2)}`, 380, totalsY + 40);
    }
    
    doc.fontSize(12).font('Helvetica-Bold');
    doc.text('Total:', 300, totalsY + 60);
    doc.text(`$${parseFloat(invoice.total).toFixed(2)}`, 380, totalsY + 60);
    
    // Footer
    doc.moveDown(2);
    doc.fontSize(10).font('Helvetica').text('Thank you for visiting Palm Cafe!', { align: 'center' });
    doc.fontSize(8).font('Helvetica').text('Generated by Palm Cafe Management System', { align: 'center' });

    doc.end();
  });
};

// API Routes

// Get all menu items
app.get('/api/menu', async (req, res) => {
  try {
    const menuItems = await MenuItem.getAll();
    res.json(menuItems);
  } catch (error) {
    console.error('Error fetching menu items:', error);
    res.status(500).json({ error: 'Failed to fetch menu items' });
  }
});

// Add new menu item
app.post('/api/menu', async (req, res) => {
  try {
    const { name, description, price } = req.body;
    
    if (!name || !price) {
      return res.status(400).json({ error: 'Name and price are required' });
    }

    const newItem = {
      id: uuidv4(),
      name: name.trim(),
      description: description ? description.trim() : '',
      price: parseFloat(price)
    };

    const createdItem = await MenuItem.create(newItem);
    res.status(201).json(createdItem);
  } catch (error) {
    console.error('Error creating menu item:', error);
    res.status(500).json({ error: 'Failed to create menu item' });
  }
});

// Update menu item
app.put('/api/menu/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, price } = req.body;
    
    if (!name || !price) {
      return res.status(400).json({ error: 'Name and price are required' });
    }

    const updatedItem = await MenuItem.update(id, {
      name: name.trim(),
      description: description ? description.trim() : '',
      price: parseFloat(price)
    });

    res.json(updatedItem);
  } catch (error) {
    console.error('Error updating menu item:', error);
    res.status(500).json({ error: 'Failed to update menu item' });
  }
});

// Delete menu item
app.delete('/api/menu/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await MenuItem.delete(id);
    
    if (!deleted) {
      return res.status(404).json({ error: 'Menu item not found' });
    }
    
    res.status(204).send();
  } catch (error) {
    console.error('Error deleting menu item:', error);
    res.status(500).json({ error: 'Failed to delete menu item' });
  }
});

// Get current tax settings
app.get('/api/tax-settings', async (req, res) => {
  try {
    const taxSettings = await TaxSettings.getCurrent();
    res.json(taxSettings);
  } catch (error) {
    console.error('Error fetching tax settings:', error);
    res.status(500).json({ error: 'Failed to fetch tax settings' });
  }
});

// Update tax settings
app.put('/api/tax-settings', async (req, res) => {
  try {
    const { tax_rate, tax_name } = req.body;
    
    if (tax_rate === undefined || !tax_name) {
      return res.status(400).json({ error: 'Tax rate and tax name are required' });
    }

    const updatedSettings = await TaxSettings.update({
      tax_rate: parseFloat(tax_rate),
      tax_name: tax_name.trim()
    });

    res.json(updatedSettings);
  } catch (error) {
    console.error('Error updating tax settings:', error);
    res.status(500).json({ error: 'Failed to update tax settings' });
  }
});

// Get tax history
app.get('/api/tax-settings/history', async (req, res) => {
  try {
    const history = await TaxSettings.getHistory();
    res.json(history);
  } catch (error) {
    console.error('Error fetching tax history:', error);
    res.status(500).json({ error: 'Failed to fetch tax history' });
  }
});

// Calculate tax for a given subtotal
app.post('/api/calculate-tax', async (req, res) => {
  try {
    const { subtotal } = req.body;
    
    if (subtotal === undefined) {
      return res.status(400).json({ error: 'Subtotal is required' });
    }

    const taxCalculation = await TaxSettings.calculateTax(parseFloat(subtotal));
    res.json(taxCalculation);
  } catch (error) {
    console.error('Error calculating tax:', error);
    res.status(500).json({ error: 'Failed to calculate tax' });
  }
});

// Get all invoices
app.get('/api/invoices', async (req, res) => {
  try {
    const invoices = await Invoice.getAll();
    res.json(invoices);
  } catch (error) {
    console.error('Error fetching invoices:', error);
    res.status(500).json({ error: 'Failed to fetch invoices' });
  }
});

// Create new invoice
app.post('/api/invoices', async (req, res) => {
  try {
    const { customerName, customerPhone, items, tipAmount, date } = req.body;
    
    if (!customerName || !items || items.length === 0) {
      return res.status(400).json({ error: 'Customer name and items are required' });
    }

    const invoiceNumber = await Invoice.getNextInvoiceNumber();

    // Calculate subtotal
    const subtotal = items.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);
    
    // Calculate tax
    const taxCalculation = await TaxSettings.calculateTax(subtotal);
    
    // Calculate total
    const tipAmountNum = parseFloat(tipAmount) || 0;
    const total = subtotal + taxCalculation.taxAmount + tipAmountNum;

    const invoiceData = {
      invoiceNumber,
      customerName,
      customerPhone,
      items,
      subtotal,
      taxAmount: taxCalculation.taxAmount,
      tipAmount: tipAmountNum,
      total,
      date
    };

    const createdInvoice = await Invoice.create(invoiceData);

    try {
      const pdfBase64 = await generatePDF(createdInvoice);
      res.json({
        invoiceNumber,
        pdf: pdfBase64,
        taxInfo: {
          taxRate: taxCalculation.taxRate,
          taxName: taxCalculation.taxName,
          taxAmount: taxCalculation.taxAmount
        }
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      res.status(500).json({ error: 'Failed to generate PDF' });
    }
  } catch (error) {
    console.error('Error creating invoice:', error);
    res.status(500).json({ error: 'Failed to create invoice' });
  }
});

// Download invoice
app.get('/api/invoices/:invoiceNumber/download', async (req, res) => {
  try {
    const { invoiceNumber } = req.params;
    
    const invoice = await Invoice.getByNumber(invoiceNumber);
    if (!invoice) {
      return res.status(404).json({ error: 'Invoice not found' });
    }

    try {
      const pdfBase64 = await generatePDF(invoice);
      res.json({ pdf: pdfBase64 });
    } catch (error) {
      console.error('Error generating PDF:', error);
      res.status(500).json({ error: 'Failed to generate PDF' });
    }
  } catch (error) {
    console.error('Error downloading invoice:', error);
    res.status(500).json({ error: 'Failed to download invoice' });
  }
});

// Get invoice statistics
app.get('/api/statistics', async (req, res) => {
  try {
    const statistics = await Invoice.getStatistics();
    res.json(statistics);
  } catch (error) {
    console.error('Error fetching statistics:', error);
    res.status(500).json({ error: 'Failed to fetch statistics' });
  }
});

// Health check
app.get('/api/health', async (req, res) => {
  try {
    const dbConnected = await testConnection();
    res.json({ 
      status: 'OK', 
      timestamp: new Date().toISOString(),
      database: dbConnected ? 'connected' : 'disconnected'
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'ERROR', 
      timestamp: new Date().toISOString(),
      error: error.message 
    });
  }
});

// Initialize database and start server
const startServer = async () => {
  try {
    // Test database connection
    const dbConnected = await testConnection();
    if (!dbConnected) {
      console.error('Failed to connect to database. Please check your database configuration.');
      process.exit(1);
    }

    // Initialize database tables
    await initializeDatabase();

    // Start server
    app.listen(PORT, () => {
      console.log(`Palm Cafe server running on port ${PORT}`);
      console.log(`API available at http://localhost:${PORT}/api`);
      console.log('Database connected and initialized successfully');
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
};

startServer(); 